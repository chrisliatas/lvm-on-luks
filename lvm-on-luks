#!/bin/bash

noise () {

    ### fill luks container partition with noise. see readme for more info

    # create temporary dm-crypt with random key    
    cryptsetup open --type plain -d /dev/urandom /dev/$1$2  to_be_wiped

    # write zeros to temporary dm-crypt
    # use dd rescue (for progress) if it is installed, else use cat

    if hash gdate 2>/dev/null; then
        ddrescue --force /dev/zero /dev/mapper/to_be_wiped
    else
        cat /dev/zero > /dev/mapper/to_be_wiped
    fi
    
    # delete temporary dm-crypt 
    cryptsetup close to_be_wiped

}

install() {

    ### setup luks

    cryptsetup luksFormat /dev/$1$2
    cryptsetup luksOpen /dev/$1$2 lvm

    ### setup lvm in luks

    # create physical volume on in new luks container
    pvcreate /dev/mapper/lvm

    # create virtual group called lvm in physical volume
    vgcreate lvm /dev/mapper/lvm

    # create logical volumes in lvm group for /swap and /root, of specified sizes
    lvcreate -n swap -L $3G lvm
    lvcreate -n root -L $4G lvm

    # use specified size for home, or if none is provided use all remaining space

    if [ -z "$5" ]
    then
        lvcreate -n home -l 100%FREE lvm
    else
        lvcreate -n home -L $5G lvm
    fi

    ### prompt to install and get details for postinstall 

    # http://stackoverflow.com/a/1885534
    echo
    read -p "Install Ubuntu. Press [Enter] upon completion..." -r
    echo
    read -p "Is /boot on LVM? [y/N]: " -r
    echo

    ### mount new install 

    # Mount root partition: 
    mount /dev/mapper/lvm-root /mnt

    # Mount your virtual filesystems:
    for i in /dev /dev/pts /proc /sys /run
        do mount -B $i /mnt$i
    done

    # copy necessary files to new install
    cp lvm-on-luks /mnt/lvm-on-luks
     
    ### finish mounting new install depending on whether /boot is encrypted or not

    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        
        # if /boot is encrypted, copy crypto_keyfile script and 
        cp crypto_keyfile /mnt/crypto_keyfile 

        # chroot to new fully mounted install
        chroot /mnt bash lvm-on-luks $1 $2 postinstall_encryptedboot

    else

        # if /boot is not encrypted, find out where it is and mount it
        read -p "Where is the /boot partition? (e.g. '/dev/sda1'): " -r
        echo

        mount $REPLY /mnt/boot

        # chroot to new fully mounted install
        chroot /mnt bash lvm-on-luks $1 $2 postinstall_clearboot

    fi

}

postinstall_clearboot() {

    ### add luks to crypttab

    # update cryptab with uuid of drive and details for keyfile decryption
    echo "lvm UUID=$(blkid -s UUID -o value /dev/$1$2) none luks" > /etc/crypttab

    ### update ramdisk
    
    update-initramfs -u

    ### cleanup and secure new boot

    chmod -R g-rwx,o-rwx /boot
    rm lvm-on-luks

}

postinstall_encryptedboot() {

    ### configure grub 
    
    echo "GRUB_ENABLE_CRYPTODISK=y" >> /etc/default/grub
    echo "GRUB_CMDLINE_LINUX=\"cryptdevice=$(blkid -s UUID -o value /dev/$2$3):lvm\""  >> /etc/default/grub
    grub-mkconfig -o /boot/grub/grub.cfg
    grub-install /dev/$1

    ### create keyfile for luks

    # make a new key and add it to the luks container
    dd bs=512 count=4 if=/dev/urandom of=/crypto_keyfile.bin
    cryptsetup luksAddKey /dev/$1$2 /crypto_keyfile.bin

    # copy the script which will add the key file to initram and make script executable
    cp crypto_keyfile /etc/initramfs-tools/hooks/crypto_keyfile
    chmod +x /etc/initramfs-tools/hooks/crypto_keyfile

    ### add luks to crypttab

    # update cryptab with uuid of drive and details for keyfile decryption
    echo "lvm UUID=$(blkid -s UUID -o value /dev/$1$2) /crypto_keyfile.bin luks,keyscript=/bin/cat" > /etc/crypttab

    ### update ramdisk

    update-initramfs -u

    ### cleanup and secure new boot and keyfile. run in new install

    chmod 000 /crypto_keyfile.bin
    chmod -R g-rwx,o-rwx /boot

    # remove ubiquity if its still there due to installer crash (?)
    apt-get -y remove ubiquity

    rm lvm-on-luks crypto_keyfile

}

if [[ "$#" -lt 3 ]] || [[ $EUID -ne 0 ]]
then
    echo "sudo bash lvm-on-luks <disk: sdx> <partition: y> noise"
    echo "sudo bash lvm-on-luks <disk: sdx> <partition: y> install <swap size in G> <root size in G> [home size in G - default: all remaining]"
    exit
fi

if [ $3 == "noise" ]
then
    noise $1 $2
fi

if [ $3 == "install" ]
then
    install $1 $2 $4 $5 $6
fi

if [ $3 == "postinstall_encryptedboot" ]
then
    postinstall_encryptedboot $1 $2
fi

if [ $3 == "postinstall_clearboot" ]
then
    postinstall_clearboot $1 $2
fi
